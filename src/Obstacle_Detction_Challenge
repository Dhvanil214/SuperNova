// Version V1 = Reading three VL53LX and print distance on serial port 
// - distance.init replaced with distance.begin for VL53L1X initialization
// Version V2 = Adding TCA initialize function and getdistance_VL53 function and this working perfect
//

#define S_RXD 18             // Custom Serail port for Servo
#define S_TXD 19             // Custom Serial port for Servo
#define I2C_SCL 33           // Custom I2C Channel
#define I2C_SDA 32           // Custom I2C Channel
#define rightvl53l1x 5       // Right side VL53L1X connected on channel 5 of TCA9548A
#define frontvl53l1x 6       // Front side VL53L1X connected on channel 6 of TCA9548A
#define leftvl53l1x 7       // Left side VL53L1X connected on channel 7 of TCA9548A

#include <HardwareSerial.h>
#include <Wire.h>
#include <SparkFun_VL53L1X.h>
#include <SCServo.h>
#define TCAADDR 0x70 // I2C address of TCA9548A

SCSCL sc;
// For LEDs and Button
const int redLEDPin = 5;   // Red LED on GPIO 5
const int buttonPin = 4;    // Push button on GPIO 4
//const int yellowLEDPin  = 4; // Yellow LED on GPIO 4
//const int greenLEDPin = 5;  // Green LED on GPIO 5

const uint16_t PWMA = 25;         
const uint16_t AIN2 = 17;        
const uint16_t AIN1 = 21;         
const uint16_t ANALOG_WRITE_BITS = 8;
int freq = 5000;
int channel_A = 0;
int resolution = ANALOG_WRITE_BITS;

SFEVL53L1X distanceSensor;
uint16_t initdistLeft = 0;        // Variable to store left side wall distance
uint16_t initdistRight = 0;       // Variable to store right side wall distance
uint16_t initdistFront = 0;       // Variable to store front side wall distance
uint16_t distanceLeft = 0;        // Variable to store left side wall distance
uint16_t distanceRight = 0;       // Variable to store right side wall distance
uint16_t distanceFront = 0;       // Variable to store front side wall distance

// Variables to store received data
String receivedData = "";
int objectColor = 0;
int objectX = 0, objectY = 0;
int objectDistance = 0;
int lastColor = 0; // Variable to remember the last detected color

// Control parameters
int idealDistanceFromWall = 170;  // Ideal distance from the wall in mm
const int maxTurnAngle = 30;  // Maximum turning angle for the servo motor in degrees

// PID parameters
float kp = 1.0;  // Proportional gain
float ki = 0.0;  // Integral gain
float kd = 0.1;  // Derivative gain

float previousError = 0;
float integral = 0;
float dt = 0.05;  // Time step (50ms loop delay)

void tcaSelect(uint8_t i) {
  if (i > 7) return;

  Wire.beginTransmission(TCAADDR);
  Wire.write(1 << i); // Select the TCA channel
  Wire.endTransmission();
}

// Function to Initialize TCA9548 Channels
void TCA_VL53_Init() {
  // Select TCA9548A channel 5 (Right VL53L1X Sensor)
  tcaSelect(rightvl53l1x);
  delay(10);
  if (distanceSensor.begin() != 0) {
    Serial.println("Right Sensor not found.");
  } else {
    Serial.println("Right Sensor found and initialized.");
    distanceSensor.setDistanceModeLong();  // Set to long-range mode
    distanceSensor.setTimingBudgetInMs(50);  // Short timing budget for faster reads
    distanceSensor.startRanging();
  }

  // Select TCA9548A channel 6 (front VL53L1X Sensor)
  tcaSelect(frontvl53l1x);
  delay(10);
  if (distanceSensor.begin() != 0) {
    Serial.println("Front Sensor not found.");
  } else {
    Serial.println("Front Sensor found and initialized.");
    distanceSensor.setDistanceModeLong();  // Set to long-range mode
    distanceSensor.setTimingBudgetInMs(50);  // Short timing budget for faster reads
    distanceSensor.startRanging();
  }
  
  // Select TCA9548A channel 7 (Left VL53L1X Sensor)
  tcaSelect(leftvl53l1x);
  delay(10);
  if (distanceSensor.begin() != 0) {
    Serial.println("Left Sensor not found.");
  } else {
    Serial.println("Left Sensor found and initialized.");
    distanceSensor.setDistanceModeLong();
    distanceSensor.setTimingBudgetInMs(50);
    distanceSensor.startRanging();
  }
}

// Function to get distances from three VL53L1X sensors
void getDistances_VL53L1X() {
  // Select and read from right sensor (channel 5)
  tcaSelect(rightvl53l1x);
  distanceSensor.startRanging(); //Write configuration bytes to initiate measurement
  while (!distanceSensor.checkForDataReady())
  {
    delay(1);
  }
  distanceRight = distanceSensor.getDistance();
  distanceSensor.clearInterrupt();
  distanceSensor.stopRanging();
  delay(1);

// Select and read from front sensor (channel 6)
  tcaSelect(frontvl53l1x);
  distanceSensor.startRanging(); //Write configuration bytes to initiate measurement
  while (!distanceSensor.checkForDataReady())
  {
    delay(1);
  }
  distanceFront = distanceSensor.getDistance();
  distanceSensor.clearInterrupt();
  distanceSensor.stopRanging();
  delay(1);

// Select and read from left sensor (channel 7)
  tcaSelect(leftvl53l1x);
  distanceSensor.startRanging(); //Write configuration bytes to initiate measurement
  while (!distanceSensor.checkForDataReady())
  {
    delay(1);
  }
  distanceLeft = distanceSensor.getDistance();
  distanceSensor.clearInterrupt();
  distanceSensor.stopRanging();
  delay(1);
}

// Function to control the steering based on the distance from the wall using PID
void controlSteeringWithPID(int16_t distance) {
  if (distance == -1) return;  // No valid reading, keep going straight
 
  float error = distance - idealDistanceFromWall; // Calculate error
  float Pout = kp * error; // Proportional term

  integral += error * dt; // Integral term
  float Iout = ki * integral;

  float derivative = (error - previousError) / dt; // Derivative term
  float Dout = kd * derivative;
  
  float output = Pout + Iout + Dout; // PID output
  previousError = error; // Update previous error

  int turnAngle = map(output, -100, 100, -maxTurnAngle, maxTurnAngle); // Map output to steering angle
  turnAngle = constrain(turnAngle, -maxTurnAngle, maxTurnAngle); // Constrain angle
  int servoAngle = 500 + turnAngle; // Set servo angle
  
  sc.WritePos(1, servoAngle, 0, 1000); // Set steering
}

void controlSteeringWithPIDR(int16_t distance) {
  if (distance == -1) return;  // No valid reading, keep going straight
 
  float error = distance - idealDistanceFromWall; // Calculate error
  float Pout = kp * error; // Proportional term

  integral += error * dt; // Integral term
  float Iout = ki * integral;

  float derivative = (error - previousError) / dt; // Derivative term
  float Dout = kd * derivative;
  
  float output = Pout + Iout + Dout; // PID output
  previousError = error; // Update previous error

  int turnAngle = map(output, -100, 100, -maxTurnAngle, maxTurnAngle); // Map output to steering angle
  turnAngle = constrain(turnAngle, -maxTurnAngle, maxTurnAngle); // Constrain angle
  int servoAngle = 500 - turnAngle; // Set servo angle
  
  sc.WritePos(1, servoAngle, 0, 1000); // Set steering
}

void initMotors() {
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(PWMA, OUTPUT);
  ledcAttachChannel(PWMA, freq, resolution, channel_A);
}

void forwardA(uint16_t pwm) {
  digitalWrite(AIN1, HIGH);
  digitalWrite(AIN2, LOW);
  ledcWrite(PWMA, pwm);
}

void stopA() {
  digitalWrite(AIN1, LOW);
  digitalWrite(AIN2, LOW);
  ledcWrite(PWMA, 0);
}

/*
// Function to get Error on LED
void indicateError(int sensorNumber) {
    // Blink the LED based on sensorNumber, e.g., 1 blink for sensor 1, 2 blinks for sensor 2, etc.
    for (int i = 0; i < sensorNumber; i++) {
        digitalWrite(yellowLEDPin, HIGH);
        delay(500);
        digitalWrite(yellowLEDPin, LOW);
        delay(500);
    }
}


// Function to control LEDs based on detected color
void controlLEDs(int color) {
    // Check if the color has changed
    if (color == 1) 
      { // Green block
        digitalWrite(greenLEDPin, HIGH); // Turn on green LED
      } 
    else if (color == 2) 
      { // Red block
        digitalWrite(redLEDPin, HIGH); // Turn on red LED
      } 
    else
      {
        digitalWrite(redLEDPin, LOW);
        digitalWrite(greenLEDPin, LOW);
      }
}
*/

// Function to parse the incoming data string
void parseData(String data) {
  // Data format: "CXXXYYYDDDD"
  // C = color (1 for green, 2 for red)
  // XXX = X-coordinate (3 digits)
  // YYY = Y-coordinate (3 digits)
  // DDDD = distance (4 digits)

  objectColor = data.substring(0, 1).toInt(); // First digit for color
  objectX = data.substring(1, 4).toInt();     // Next 3 digits for X-coordinate
  objectY = data.substring(4, 7).toInt();     // Next 3 digits for Y-coordinate
  objectDistance = data.substring(7, 11).toInt(); // Last 4 digits for distance
}


void setup() {
  // Set LED and button pins as OUTPUT and INPUT
  pinMode(redLEDPin, OUTPUT);
//  pinMode(greenLEDPin, OUTPUT);
//  pinMode(yellowLEDPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP); // Set button pin with internal pull-up resistor

  Wire.begin(I2C_SDA, I2C_SCL);
  Serial.begin(115200);
  while (!Serial) {
    ;  // wait for serial port to connect
  }
  Serial2.begin(9600, SERIAL_8N1, 16, 27);  // Using Serial1 for RX on GPIO16, TX on GPIO27
  Serial.println("ESP32 Serial Communication Initialized");

  TCA_VL53_Init();            // Initialize TCA and VL53L1X Sensors
  initMotors();                 // Initialize TB6612FNG for DC Motor
  delay(200);

  Serial1.begin(1000000, SERIAL_8N1, S_RXD, S_TXD);
  sc.pSerial = &Serial1;
  delay(1000);
  sc.WritePos(1, 500, 0, 1000); // Set steering to zero
  delay(200);  

  digitalWrite(redLEDPin,HIGH);

  // Wait for button press to start
  while (digitalRead(buttonPin) == HIGH) {
    // Do nothing, just wait for the button to be pressed
    delay(100); // A short delay to prevent bouncing issues
  }

  digitalWrite(redLEDPin, LOW);

//  forwardA(400);                // Start robot forward */
}



void loop() 
  {
    /*getDistances_VL53L1X();           // Get Distance form Sensor
    Serial.print("Distance:-> ");
    Serial.print(" L: ");
    Serial.print(distanceLeft);
    Serial.print(" F: ");
    Serial.print(distanceFront);
    Serial.print(" R: ");
    Serial.println(distanceRight);*/
    // Check if data is available on Serial2 from the Raspberry Pi
    while (Serial2.available()) 
      {
        char incomingByte = Serial2.read(); // Read each byte from Serial
        receivedData += incomingByte;

        // Check if we have received a full message (indicated by newline '\n')
        if (incomingByte == '\n') 
        {
          // Remove the newline character from the end
          receivedData.trim();
          // Debugging - Print the received string
          Serial.print("Received: ");
          Serial.println(receivedData);

          // Now check the length of the data (it should be exactly 11 characters)
          if (receivedData.length() == 11) 
          {
            Serial.print("Received data: ");
            Serial.println(receivedData);
            // Parse the received string
            parseData(receivedData); // Parse the data
            // Display the parsed data
            Serial.println("Parsed Data:");
            Serial.print("Object Color: ");
            Serial.println(objectColor == 1 ? "Green" : (objectColor == 2 ? "Red" : "Unknown"));
            Serial.print("X-coordinate: ");
            Serial.println(objectX);
            Serial.print("Y-coordinate: ");
            Serial.println(objectY);
            Serial.print("Distance: ");
            Serial.println(objectDistance);
            Serial.println();  // Add an empty line for readability
            getDistances_VL53L1X();
            //controlLEDs(objectColor);                   // Turning on LED as Color
            if (objectDistance>=250)
            {
                sc.WritePos(1, 500, 0, 1000);
                forwardA(150);
            }
            else
            {
              stopA();                             // Stop Motor
              if (objectColor == 2)
              {
                sc.WritePos(1, 420, 0, 1000);               //Turning Left
                forwardA(200);
                delay(200);
                getDistances_VL53L1X();
                idealDistanceFromWall = 100;

                while (distanceFront>600){
                  controlSteeringWithPIDR(distanceRight); // Adjust steering based on distance using PID
                  forwardA(500);
                }
                stopA();
              }
              else if (objectColor == 1)
              {
                  sc.WritePos(1, 580, 0, 1000);               //Turning Left
              }
              else if (objectColor == 3)
              {
                stopA();
              }
              else
              {
                sc.WritePos(1, 500, 0, 1000);      // Straight
                delay(100);
              }
            }
          } 
          else 
          {
            // Print an error message for debugging if length is incorrect
            Serial.print("Invalid data length: ");
            Serial.println(receivedData.length());
          }
        // Clear the buffer for the next message
        receivedData = "";
      }
    }
    // Small delay for readability and to prevent buffer overflow
    delay(50);
  }
